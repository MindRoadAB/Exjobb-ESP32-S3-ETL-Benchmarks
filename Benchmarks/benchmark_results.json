{
  "USE_ETL=0,TYPE=string": {
    "string: string s()": 26,
    "string: string s(c_str_large)": 2107,
    "string: string s(c_str_large, size)": 1941,
    "string: string s(MAX_STRLN, 'a')": 1911,
    "string: string s(string_view v)": 1995,
    "string: c_str_tiny": 161,
    "string: c_str_medium": 1963,
    "string: c_str_large": 2106,
    "string: c_str_jumbo": 4914,
    "string: _str_tiny[1]": 7,
    "string: _str_medium[11]": 7,
    "string: _str_large[88]": 7,
    "string: _str_jumbo[888]": 7,
    "string: _str_large.at(88)": 26,
    "string: _str_large.front()": 7,
    "string: _str_large.back()": 7,
    "string: _str_large.begin()": 7,
    "string: _str_large.end()": 8,
    "string: _str_large.rbegin()": 23,
    "string: _str_large.rend()": 20,
    "string: _str_large.data()": 7,
    "string: _str_large.empty()": 7,
    "string: _str_large.max_size()": 7,
    "string: _str_large.capacity()": 6,
    "string: _str_large.size()": 7,
    "string: _str_tiny.resize(MAX_STRLN)": 27,
    "string: _str_tiny.resize_and_overwrite(size, operation)": 137,
    "string: reverse _str_tiny": 62,
    "string: reverse _str_medium": 286,
    "string: reverse _str_large": 766,
    "string: reverse _str_jumbo": 11335,
    "_str_jumbo.clear()": 14,
    "_str_jumbo += 'a'": 108,
    "string: append c_str_jumbo": 3142,
    "compare: _str_jumbo == _str_jumbo2": 7,
    "string: _str_medium.push_back('a')": 37,
    "string: _str_medium.insert(3, 'Hello')": 491
  },
  "USE_ETL=0,TYPE=vector": {
    "vector: _vector_int i{}": 69,
    "vector: _vector_int i{ints} (128 members) ": 8035,
    "_vector_int i(ints.begin(), ints.end())": 7992,
    "_vector_int push_back(111)": 39,
    "_vector_int pop_back()": 8,
    "_vector_int insert(middle, 2222)": 2336,
    "_vector_int insert(0, 2222)": 4640,
    "_vector_int erase(middle)": 3120,
    "_vector_int erase(0)": 6195
  },
  "USE_ETL=0,TYPE=map": {
    "unordered_map<int, string>: _map m{}": 167,
    "unordered_map<int, string>: _map m{umap_1}": 7695,
    "unordered_map<int, string>: _map m(umap_1.begin(), umap_1.end())": 9534,
    "unordered_map<int, string>: operator[]": 64,
    "unordered_map<int, string>: insert(map.begin, std::make_pair)": 1427,
    "unordered_map<int, string>: insert(std::make_pair)": 1431,
    "unordered_map<int, string>: insert(mapElem)": 1337,
    "unordered_map<int, string>: insert(begin, end)": 4128,
    "unordered_map<int, string>: erase(key)": 929,
    "unordered_map<int, string>: find(key)": 49
  },
  "USE_ETL=0,TYPE=set": {
    "unordered_set<int>: _set_int s{}": 167,
    "unordered_set<int>: _set_int s{copy}": 58126,
    "unordered_set<int>: _set_int s(begin, end)": 73127,
    "unordered_set<int>: operator= constructor": 58126,
    "unordered_set<string>: _set_string s{}": 167,
    "unordered_set<string>: _set_string s{copy}": 24551,
    "unordered_set<string>: _set_str s(begin, end)": 32865,
    "unordered_set<string>: operator= constructor": 24551,
    "unordered_set<int>: uset.find(key)": 60,
    "unordered_set<string>: uset.find(key)": 544,
    "unordered_set<string>: uset.contains(key)": 955,
    "unordered_set<int>: uset.contains(key)": 87,
    "unordered_set<int>: uset.insert(key)": 1309,
    "unordered_set<int>: uset.insert(begin, end)": 7624,
    "unordered_set<int>: uset.insert(hint, key)": 1293,
    "unordered_set<string>: uset.insert(key)": 2298,
    "unordered_set<string>: uset.insert(begin, end)": 8987,
    "unordered_set<string>: uset.insert(hint, key)": 2287,
    "unordered_set<int>: uset.erase(key)": 914,
    "unordered_set<string>: uset.erase(key)": 1154
  },
  "USE_ETL=0,TYPE=deque": {
    "deque<int>: deque_int{}": 3632,
    "deque<int>: deque_int{empty copy}": 4041,
    "deque<int>: deque_int{copy}": 5438,
    "deque<int>: deque_int(begin, end)": 5346,
    "deque<string>: deque_string{}": 3714,
    "deque<string>: deque_string{empty copy}": 3901,
    "deque<string>: deque_string{copy}": 9511,
    "deque<string>: deque_string(begin, end)": 9429,
    "deque<int>: operator[middle]": 49,
    "deque<int>: front()": 11,
    "deque<int>: back()": 43,
    "deque<string>: operator[middle]": 57,
    "deque<string>: front()": 11,
    "deque<string>: back()": 44,
    "deque<int>: push_front(val)": 1140,
    "deque<int>: push_back(val)": 68,
    "deque<int>: insert(middle, val)": 1248,
    "deque<int>: insert(pos, begin, end)": 2520,
    "deque<int>: erase(pos)": 859,
    "deque<string>: push_front(val)": 1368,
    "deque<string>: push_back(val)": 285,
    "deque<string>: insert(middle, val)": 2685,
    "deque<string>: insert(pos, begin, end)": 2959,
    "deque<string>: erase(pos)": 1238
  },
  "USE_ETL=1,TYPE=string": {
    "string: string s()": 58,
    "string: string s(c_str_large)": 2475,
    "string: string s(c_str_large, size)": 1386,
    "string: string s(MAX_STRLN, 'a')": 244,
    "string: string s(string_view v)": 1382,
    "string: c_str_tiny": 186,
    "string: c_str_medium": 914,
    "string: c_str_large": 2475,
    "string: c_str_jumbo": 20655,
    "string: _str_tiny[1]": 7,
    "string: _str_medium[11]": 7,
    "string: _str_large[88]": 7,
    "string: _str_jumbo[888]": 7,
    "string: _str_large.at(88)": 7,
    "string: _str_large.front()": 7,
    "string: _str_large.back()": 7,
    "string: _str_large.begin()": 6,
    "string: _str_large.end()": 7,
    "string: _str_large.rbegin()": 7,
    "string: _str_large.rend()": 7,
    "string: _str_large.data()": 7,
    "string: _str_large.empty()": 7,
    "string: _str_large.max_size()": 7,
    "string: _str_large.capacity()": 7,
    "string: _str_large.size()": 7,
    "string: _str_tiny.resize(MAX_STRLN)": 50,
    "string: _str_tiny.resize_and_overwrite(size, operation)": 81,
    "string: reverse _str_tiny": 33,
    "string: reverse _str_medium": 160,
    "string: reverse _str_large": 430,
    "string: reverse _str_jumbo": 6375,
    "_str_jumbo.clear()": 39,
    "_str_jumbo += 'a'": 121,
    "string: append c_str_jumbo": 26911,
    "compare: _str_jumbo == _str_jumbo2": 8,
    "string: _str_medium.push_back('a')": 33,
    "string: _str_medium.insert(3, 'Hello')": 468
  },
  "USE_ETL=1,TYPE=vector": {
    "vector: _vector_int i{}": 12,
    "vector: _vector_int i{ints} (128 members) ": 6225,
    "_vector_int i(ints.begin(), ints.end())": 6218,
    "_vector_int push_back(111)": 20,
    "_vector_int pop_back()": 8,
    "_vector_int insert(middle, 2222)": 2322,
    "_vector_int insert(0, 2222)": 4626,
    "_vector_int erase(middle)": 3086,
    "_vector_int erase(0)": 6160
  },
  "USE_ETL=1,TYPE=map": {
    "unordered_map<int, string>: _map m{}": 496,
    "unordered_map<int, string>: _map m{umap_1}": 2260,
    "unordered_map<int, string>: _map m(umap_1.begin(), umap_1.end())": 2279,
    "unordered_map<int, string>: operator[]": 48,
    "unordered_map<int, string>: insert(map.begin, std::make_pair)": 615,
    "unordered_map<int, string>: insert(std::make_pair)": 570,
    "unordered_map<int, string>: insert(mapElem)": 478,
    "unordered_map<int, string>: insert(begin, end)": 1159,
    "unordered_map<int, string>: erase(key)": 183,
    "unordered_map<int, string>: find(key)": 42
  },
  "USE_ETL=1,TYPE=set": {
    "unordered_set<int>: _set_int s{}": 1376,
    "unordered_set<int>: _set_int s{copy}": 10668,
    "unordered_set<int>: _set_int s(begin, end)": 10687,
    "unordered_set<int>: operator= constructor": 10668,
    "unordered_set<string>: _set_string s{}": 1376,
    "unordered_set<string>: _set_string s{copy}": 8652,
    "unordered_set<string>: _set_str s(begin, end)": 8681,
    "unordered_set<string>: operator= constructor": 8652,
    "unordered_set<int>: uset.find(key)": 59,
    "unordered_set<string>: uset.find(key)": 442,
    "unordered_set<string>: uset.contains(key)": 350,
    "unordered_set<int>: uset.contains(key)": 95,
    "unordered_set<int>: uset.insert(key)": 214,
    "unordered_set<int>: uset.insert(begin, end)": 1919,
    "unordered_set<int>: uset.insert(hint, key)": 214,
    "unordered_set<string>: uset.insert(key)": 604,
    "unordered_set<string>: uset.insert(begin, end)": 2379,
    "unordered_set<string>: uset.insert(hint, key)": 635,
    "unordered_set<int>: uset.erase(key)": 159,
    "unordered_set<string>: uset.erase(key)": 514
  },
  "USE_ETL=1,TYPE=deque": {
    "deque<int>: deque_int{}": 77,
    "deque<int>: deque_int{empty copy}": 112,
    "deque<int>: deque_int{copy}": 1465,
    "deque<int>: deque_int(begin, end)": 1481,
    "deque<string>: deque_string{}": 87,
    "deque<string>: deque_string{empty copy}": 122,
    "deque<string>: deque_string{copy}": 6140,
    "deque<string>: deque_string(begin, end)": 6152,
    "deque<int>: operator[middle]": 54,
    "deque<int>: front()": 7,
    "deque<int>: back()": 47,
    "deque<string>: operator[middle]": 56,
    "deque<string>: front()": 7,
    "deque<string>: back()": 50,
    "deque<int>: push_front(val)": 36,
    "deque<int>: push_back(val)": 39,
    "deque<int>: insert(middle, val)": 979,
    "deque<int>: insert(pos, begin, end)": 1671,
    "deque<int>: erase(pos)": 664,
    "deque<string>: push_front(val)": 382,
    "deque<string>: push_back(val)": 385,
    "deque<string>: insert(middle, val)": 3150,
    "deque<string>: insert(pos, begin, end)": 3593,
    "deque<string>: erase(pos)": 1524
  }
}