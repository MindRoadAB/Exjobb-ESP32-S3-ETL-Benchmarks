{
  "USE_ETL=0,TYPE=string": {
    "string: string s()": 0,
    "string: string s(c_str_large)": 1749,
    "string: string s(c_str_large, size)": 1570,
    "string: string s(MAX_STRLN, 'a')": 1978,
    "string: string s(string_view v)": 1573,
    "string: c_str_tiny": 115,
    "string: c_str_medium": 1604,
    "string: c_str_large": 1743,
    "string: c_str_jumbo": 4551,
    "string: _str_tiny.resize(MAX_STRLN)": 12,
    "string: _str_tiny.resize_and_overwrite(size, operation)": 63,
    "string: reverse _str_tiny": 24,
    "string: reverse _str_medium": 149,
    "string: reverse _str_large": 419,
    "string: reverse _str_jumbo": 6364,
    "_str_jumbo.clear()": 3,
    "_str_jumbo += 'a'": 25,
    "string: append c_str_jumbo": 3111,
    "compare: _str_jumbo == _str_jumbo2": 0,
    "string: _str_medium.push_back('a')": 27,
    "string: _str_medium.insert(3, 'Hello')": 363,
    "string: _str_medium.insert(3, 5, 'a')": 326,
    "string: _str_medium.insert(_str_medium.begin() + 3, 'a')": 313,
    "string: _str_medium.erase(3, 5)": 313,
    "string: _str_medium.erase(_str_medium.begin() + 3)": 352,
    "string: _str_jumbo.replace(middle_pos, \"hello again\")": 92
  },
  "USE_ETL=0,TYPE=vector": {
    "vector: _vector_int i{}": 0,
    "vector: construct with size and value (256, 7)": 1974,
    "vector: _vector_int i{ints} (128 members) ": 7656,
    "_vector_int i(ints.begin(), ints.end())": 7645,
    "_vector_int push_back(111)": 7,
    "_vector_int pop_back()": 2,
    "_vector_int insert(middle, 2222)": 2304,
    "_vector_int insert(0, 2222)": 4610,
    "_vector_int erase(middle)": 3063,
    "_vector_int erase(0)": 6135,
    "vector: i_blank == i_blank2": 0,
    "vector: i_blank.rbegin()": 0,
    "vector: i_blank.rend()": 0,
    "vector: i_blank.at(middle)": 0,
    "vector: i_blank.front()": 0,
    "vector: i_blank.back()": 0,
    "vector: i_blank.size()": 0,
    "vector: i_blank.capacity()": 0,
    "vector: i_blank.max_size()": 0,
    "vector: i_blank.reserve(512)": 13,
    "vector: i_blank.resize(256)": 15,
    "vector: reverse i_blank": 1164,
    "vector: insert 10 elements at middle": 6704,
    "vector: insert range at end (append)": 552,
    "vector: i_blank.clear()": 2,
    "vector: resize and fill": 809
  },
  "USE_ETL=0,TYPE=map": {
    "unordered_map<int, string>: _map m{}": 78,
    "unordered_map<int, string>: _map m{umap_1}": 6250,
    "unordered_map<int, string>: _map m(umap_1.begin(), umap_1.end())": 7608,
    "unordered_map<int, string>: operator[]": 35,
    "unordered_map<int, string>: insert(map.begin, std::make_pair)": 1035,
    "unordered_map<int, string>: insert(std::make_pair)": 1037,
    "unordered_map<int, string>: insert(mapElem)": 991,
    "unordered_map<int, string>: insert(begin, end)": 2990,
    "unordered_map<int, string>: erase(key)": 753,
    "unordered_map<int, string>: find(key)": 0,
    "unordered_map: size()": 0,
    "unordered_map: empty()": 0,
    "unordered_map: at(key)": 36,
    "unordered_map: count(key)": 0,
    "unordered_map: count(nonexistent key)": 0,
    "unordered_map: bucket_count()": 0,
    "unordered_map: load_factor()": 0,
    "unordered_map: equality comparison (==)": 0,
    "unordered_map: operator[] overwrite": 155
  },
  "USE_ETL=0,TYPE=set": {
    "unordered_set<int>: _set_int s{}": 0,
    "unordered_set<int>: _set_int s{copy}": 48590,
    "unordered_set<int>: _set_int s(begin, end)": 59124,
    "unordered_set<int>: operator= constructor": 48590,
    "unordered_set<string>: _set_string s{}": 78,
    "unordered_set<string>: _set_string s{copy}": 20684,
    "unordered_set<string>: _set_str s(begin, end)": 26185,
    "unordered_set<string>: operator= constructor": 20684,
    "unordered_set<int>: uset.find(key)": 5,
    "unordered_set<string>: uset.find(key)": 319,
    "unordered_set<string>: uset.contains(key)": 29,
    "unordered_set<int>: uset.contains(key)": 0,
    "unordered_set<int>: uset.insert(key)": 938,
    "unordered_set<int>: uset.insert(begin, end)": 5644,
    "unordered_set<int>: uset.insert(hint, key)": 932,
    "unordered_set<string>: uset.insert(key)": 1597,
    "unordered_set<string>: uset.insert(begin, end)": 6658,
    "unordered_set<string>: uset.insert(hint, key)": 1588,
    "unordered_set<int>: uset.erase(key)": 740,
    "unordered_set<string>: uset.erase(key)": 826
  },
  "USE_ETL=0,TYPE=deque": {
    "deque<int>: deque_int{}": 2995,
    "deque<int>: deque_int{empty copy}": 3096,
    "deque<int>: deque_int{copy}": 4394,
    "deque<int>: deque_int(begin, end)": 4404,
    "deque<string>: deque_string{}": 3052,
    "deque<string>: deque_string{empty copy}": 3136,
    "deque<string>: deque_string{copy}": 6611,
    "deque<string>: deque_string(begin, end)": 6532,
    "deque<int>: operator[middle]": 0,
    "deque<int>: front()": 0,
    "deque<int>: back()": 0,
    "deque<string>: operator[middle]": 0,
    "deque<string>: front()": 0,
    "deque<string>: back()": 0,
    "deque<int>: push_front(val)": 902,
    "deque<int>: push_back(val)": 22,
    "deque<int>: insert(middle, val)": 724,
    "deque<int>: insert(pos, begin, end)": 1241,
    "deque<int>: erase(pos)": 455,
    "deque<string>: push_front(val)": 973,
    "deque<string>: push_back(val)": 90,
    "deque<string>: insert(middle, val)": 1671,
    "deque<string>: insert(pos, begin, end)": 1523,
    "deque<string>: erase(pos)": 667
  },
  "USE_ETL=1,TYPE=string": {
    "string: string s()": 0,
    "string: string s(c_str_large)": 1658,
    "string: string s(c_str_large, size)": 1482,
    "string: string s(MAX_STRLN, 'a')": 0,
    "string: string s(string_view v)": 1475,
    "string: c_str_tiny": 111,
    "string: c_str_medium": 606,
    "string: c_str_large": 1657,
    "string: c_str_jumbo": 6303,
    "string: _str_tiny.resize(MAX_STRLN)": 27,
    "string: _str_tiny.resize_and_overwrite(size, operation)": 57,
    "string: reverse _str_tiny": 25,
    "string: reverse _str_medium": 153,
    "string: reverse _str_large": 421,
    "string: reverse _str_jumbo": 6367,
    "_str_jumbo.clear()": 14,
    "_str_jumbo += 'a'": 20,
    "string: append c_str_jumbo": 7854,
    "compare: _str_jumbo == _str_jumbo2": 0,
    "string: _str_medium.push_back('a')": 17,
    "string: _str_medium.insert(3, 'Hello')": 388,
    "string: _str_medium.insert(3, 5, 'a')": 319,
    "string: _str_medium.insert(_str_medium.begin() + 3, 'a')": 304,
    "string: _str_medium.erase(3, 5)": 321,
    "string: _str_medium.erase(_str_medium.begin() + 3)": 348,
    "string: _str_jumbo.replace(middle_pos, \"hello again\")": 464
  },
  "USE_ETL=1,TYPE=vector": {
    "vector: _vector_int i{}": 0,
    "vector: construct with size and value (256, 7)": 0,
    "vector: _vector_int i{ints} (128 members) ": 356,
    "_vector_int i(ints.begin(), ints.end())": 356,
    "_vector_int push_back(111)": 1,
    "_vector_int pop_back()": 1,
    "_vector_int insert(middle, 2222)": 2292,
    "_vector_int insert(0, 2222)": 4589,
    "_vector_int erase(middle)": 3058,
    "_vector_int erase(0)": 6133,
    "vector: i_blank == i_blank2": 0,
    "vector: i_blank.rbegin()": 0,
    "vector: i_blank.rend()": 0,
    "vector: i_blank.at(middle)": 0,
    "vector: i_blank.front()": 0,
    "vector: i_blank.back()": 0,
    "vector: i_blank.size()": 0,
    "vector: i_blank.capacity()": 0,
    "vector: i_blank.max_size()": 0,
    "vector: i_blank.reserve(512)": 0,
    "vector: i_blank.resize(256)": 9,
    "vector: reverse i_blank": 587,
    "vector: insert 10 elements at middle": 1766,
    "vector: insert range at end (append)": 517,
    "vector: i_blank.clear()": 0,
    "vector: resize and fill": 1418
  },
  "USE_ETL=1,TYPE=map": {
    "unordered_map<int, string>: _map m{}": 183,
    "unordered_map<int, string>: _map m{umap_1}": 1204,
    "unordered_map<int, string>: _map m(umap_1.begin(), umap_1.end())": 1203,
    "unordered_map<int, string>: operator[]": 36,
    "unordered_map<int, string>: insert(map.begin, std::make_pair)": 265,
    "unordered_map<int, string>: insert(std::make_pair)": 264,
    "unordered_map<int, string>: insert(mapElem)": 275,
    "unordered_map<int, string>: insert(begin, end)": 643,
    "unordered_map<int, string>: erase(key)": 82,
    "unordered_map<int, string>: find(key)": 0,
    "unordered_map: size()": 0,
    "unordered_map: empty()": 0,
    "unordered_map: at(key)": 0,
    "unordered_map: count(key)": 0,
    "unordered_map: count(nonexistent key)": 0,
    "unordered_map: bucket_count()": 0,
    "unordered_map: load_factor()": 0,
    "unordered_map: equality comparison (==)": 1041,
    "unordered_map: operator[] overwrite": 127
  },
  "USE_ETL=1,TYPE=set": {
    "unordered_set<int>: _set_int s{}": 503,
    "unordered_set<int>: _set_int s{copy}": 4855,
    "unordered_set<int>: _set_int s(begin, end)": 4859,
    "unordered_set<int>: operator= constructor": 4855,
    "unordered_set<string>: _set_string s{}": 511,
    "unordered_set<string>: _set_string s{copy}": 4735,
    "unordered_set<string>: _set_str s(begin, end)": 4737,
    "unordered_set<string>: operator= constructor": 4810,
    "unordered_set<int>: uset.find(key)": 0,
    "unordered_set<string>: uset.find(key)": 84,
    "unordered_set<string>: uset.contains(key)": 84,
    "unordered_set<int>: uset.contains(key)": 0,
    "unordered_set<int>: uset.insert(key)": 101,
    "unordered_set<int>: uset.insert(begin, end)": 925,
    "unordered_set<int>: uset.insert(hint, key)": 91,
    "unordered_set<string>: uset.insert(key)": 313,
    "unordered_set<string>: uset.insert(begin, end)": 1344,
    "unordered_set<string>: uset.insert(hint, key)": 321,
    "unordered_set<int>: uset.erase(key)": 74,
    "unordered_set<string>: uset.erase(key)": 226
  },
  "USE_ETL=1,TYPE=deque": {
    "deque<int>: deque_int{}": 0,
    "deque<int>: deque_int{empty copy}": 20,
    "deque<int>: deque_int{copy}": 573,
    "deque<int>: deque_int(begin, end)": 573,
    "deque<string>: deque_string{}": 0,
    "deque<string>: deque_string{empty copy}": 35,
    "deque<string>: deque_string{copy}": 4009,
    "deque<string>: deque_string(begin, end)": 3989,
    "deque<int>: operator[middle]": 0,
    "deque<int>: front()": 0,
    "deque<int>: back()": 0,
    "deque<string>: operator[middle]": 0,
    "deque<string>: front()": 0,
    "deque<string>: back()": 0,
    "deque<int>: push_front(val)": 11,
    "deque<int>: push_back(val)": 11,
    "deque<int>: insert(middle, val)": 280,
    "deque<int>: insert(pos, begin, end)": 524,
    "deque<int>: erase(pos)": 213,
    "deque<string>: push_front(val)": 211,
    "deque<string>: push_back(val)": 201,
    "deque<string>: insert(middle, val)": 1886,
    "deque<string>: insert(pos, begin, end)": 1898,
    "deque<string>: erase(pos)": 823
  }
}