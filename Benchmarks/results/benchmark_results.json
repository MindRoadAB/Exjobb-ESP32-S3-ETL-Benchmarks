{
  "USE_ETL=0,TYPE=string": {
    "string: string s()": 26,
    "string: string s(c_str_large)": 2275,
    "string: string s(c_str_large, size)": 2109,
    "string: string s(MAX_STRLN, 'a')": 2080,
    "string: string s(string_view v)": 2164,
    "string: c_str_tiny": 161,
    "string: c_str_medium": 2132,
    "string: c_str_large": 2275,
    "string: c_str_jumbo": 5083,
    "string: _str_tiny.resize(MAX_STRLN)": 28,
    "string: _str_tiny.resize_and_overwrite(size, operation)": 137,
    "string: reverse _str_tiny": 61,
    "string: reverse _str_medium": 285,
    "string: reverse _str_large": 765,
    "string: reverse _str_jumbo": 11336,
    "_str_jumbo.clear()": 14,
    "_str_jumbo += 'a'": 108,
    "string: append c_str_jumbo": 3142,
    "compare: _str_jumbo == _str_jumbo2": 7,
    "string: _str_medium.push_back('a')": 37,
    "string: _str_medium.insert(3, 'Hello')": 490,
    "string: _str_medium.insert(3, 5, 'a')": 420,
    "string: _str_medium.insert(_str_medium.begin() + 3, 'a')": 381,
    "string: _str_medium.erase(3, 5)": 369,
    "string: _str_medium.erase(_str_medium.begin() + 3)": 399,
    "string: _str_jumbo.replace(middle_pos, \"hello again\")": 215
  },
  "USE_ETL=0,TYPE=vector": {
    "vector: _vector_int i{}": 67,
    "vector: construct with size and value (256, 7)": 3276,
    "vector: _vector_int i{ints} (128 members) ": 8204,
    "_vector_int i(ints.begin(), ints.end())": 8163,
    "_vector_int push_back(111)": 39,
    "_vector_int pop_back()": 8,
    "_vector_int insert(middle, 2222)": 2338,
    "_vector_int insert(0, 2222)": 4642,
    "_vector_int erase(middle)": 3120,
    "_vector_int erase(0)": 6195,
    "vector: i_blank == i_blank2": 8,
    "vector: i_blank.rbegin()": 20,
    "vector: i_blank.rend()": 20,
    "vector: i_blank.at(middle)": 25,
    "vector: i_blank.front()": 7,
    "vector: i_blank.back()": 7,
    "vector: i_blank.size()": 7,
    "vector: i_blank.capacity()": 7,
    "vector: i_blank.max_size()": 7,
    "vector: i_blank.reserve(512)": 33,
    "vector: i_blank.resize(256)": 30,
    "vector: reverse i_blank": 2094,
    "vector: insert 10 elements at middle": 7317,
    "vector: insert range at end (append)": 771,
    "vector: i_blank.clear()": 16,
    "vector: resize and fill": 1180
  },
  "USE_ETL=0,TYPE=map": {
    "unordered_map<int, string>: _map m{}": 167,
    "unordered_map<int, string>: _map m{umap_1}": 8369,
    "unordered_map<int, string>: _map m(umap_1.begin(), umap_1.end())": 10206,
    "unordered_map<int, string>: operator[]": 64,
    "unordered_map<int, string>: insert(map.begin, std::make_pair)": 1514,
    "unordered_map<int, string>: insert(std::make_pair)": 1512,
    "unordered_map<int, string>: insert(mapElem)": 1421,
    "unordered_map<int, string>: insert(begin, end)": 4379,
    "unordered_map<int, string>: erase(key)": 1015,
    "unordered_map<int, string>: find(key)": 49,
    "unordered_map: size()": 7,
    "unordered_map: empty()": 7,
    "unordered_map: at(key)": 72,
    "unordered_map: count(key)": 73,
    "unordered_map: count(nonexistent key)": 65,
    "unordered_map: bucket_count()": 7,
    "unordered_map: load_factor()": 8,
    "unordered_map: equality comparison (==)": 424,
    "unordered_map: operator[] overwrite": 230
  },
  "USE_ETL=0,TYPE=set": {
    "unordered_set<int>: _set_int s{}": 167,
    "unordered_set<int>: _set_int s{copy}": 63689,
    "unordered_set<int>: _set_int s(begin, end)": 79028,
    "unordered_set<int>: operator= constructor": 63691,
    "unordered_set<string>: _set_string s{}": 167,
    "unordered_set<string>: _set_string s{copy}": 26743,
    "unordered_set<string>: _set_str s(begin, end)": 35058,
    "unordered_set<string>: operator= constructor": 26743,
    "unordered_set<int>: uset.find(key)": 60,
    "unordered_set<string>: uset.find(key)": 544,
    "unordered_set<string>: uset.contains(key)": 956,
    "unordered_set<int>: uset.contains(key)": 87,
    "unordered_set<int>: uset.insert(key)": 1394,
    "unordered_set<int>: uset.insert(begin, end)": 8129,
    "unordered_set<int>: uset.insert(hint, key)": 1379,
    "unordered_set<string>: uset.insert(key)": 2381,
    "unordered_set<string>: uset.insert(begin, end)": 9325,
    "unordered_set<string>: uset.insert(hint, key)": 2373,
    "unordered_set<int>: uset.erase(key)": 999,
    "unordered_set<string>: uset.erase(key)": 1239
  },
  "USE_ETL=0,TYPE=deque": {
    "deque<int>: deque_int{}": 3969,
    "deque<int>: deque_int{empty copy}": 4378,
    "deque<int>: deque_int{copy}": 5776,
    "deque<int>: deque_int(begin, end)": 5684,
    "deque<string>: deque_string{}": 4051,
    "deque<string>: deque_string{empty copy}": 4238,
    "deque<string>: deque_string{copy}": 10017,
    "deque<string>: deque_string(begin, end)": 9936,
    "deque<int>: operator[middle]": 49,
    "deque<int>: front()": 11,
    "deque<int>: back()": 43,
    "deque<string>: operator[middle]": 57,
    "deque<string>: front()": 11,
    "deque<string>: back()": 44,
    "deque<int>: push_front(val)": 1225,
    "deque<int>: push_back(val)": 68,
    "deque<int>: insert(middle, val)": 1247,
    "deque<int>: insert(pos, begin, end)": 2520,
    "deque<int>: erase(pos)": 860,
    "deque<string>: push_front(val)": 1452,
    "deque<string>: push_back(val)": 285,
    "deque<string>: insert(middle, val)": 2685,
    "deque<string>: insert(pos, begin, end)": 2959,
    "deque<string>: erase(pos)": 1239
  },
  "USE_ETL=1,TYPE=string": {
    "string: string s()": 61,
    "string: string s(c_str_large)": 2477,
    "string: string s(c_str_large, size)": 1386,
    "string: string s(MAX_STRLN, 'a')": 244,
    "string: string s(string_view v)": 1385,
    "string: c_str_tiny": 187,
    "string: c_str_medium": 915,
    "string: c_str_large": 2477,
    "string: c_str_jumbo": 20660,
    "string: _str_tiny.resize(MAX_STRLN)": 50,
    "string: _str_tiny.resize_and_overwrite(size, operation)": 81,
    "string: reverse _str_tiny": 34,
    "string: reverse _str_medium": 160,
    "string: reverse _str_large": 429,
    "string: reverse _str_jumbo": 6376,
    "_str_jumbo.clear()": 39,
    "_str_jumbo += 'a'": 122,
    "string: append c_str_jumbo": 26917,
    "compare: _str_jumbo == _str_jumbo2": 8,
    "string: _str_medium.push_back('a')": 33,
    "string: _str_medium.insert(3, 'Hello')": 470,
    "string: _str_medium.insert(3, 5, 'a')": 399,
    "string: _str_medium.insert(_str_medium.begin() + 3, 'a')": 329,
    "string: _str_medium.erase(3, 5)": 364,
    "string: _str_medium.erase(_str_medium.begin() + 3)": 378,
    "string: _str_jumbo.replace(middle_pos, \"hello again\")": 722
  },
  "USE_ETL=1,TYPE=vector": {
    "vector: _vector_int i{}": 11,
    "vector: construct with size and value (256, 7)": 33,
    "vector: _vector_int i{ints} (128 members) ": 6228,
    "_vector_int i(ints.begin(), ints.end())": 6219,
    "_vector_int push_back(111)": 20,
    "_vector_int pop_back()": 8,
    "_vector_int insert(middle, 2222)": 2324,
    "_vector_int insert(0, 2222)": 4627,
    "_vector_int erase(middle)": 3086,
    "_vector_int erase(0)": 6161,
    "vector: i_blank == i_blank2": 7,
    "vector: i_blank.rbegin()": 7,
    "vector: i_blank.rend()": 7,
    "vector: i_blank.at(middle)": 7,
    "vector: i_blank.front()": 7,
    "vector: i_blank.back()": 7,
    "vector: i_blank.size()": 7,
    "vector: i_blank.capacity()": 7,
    "vector: i_blank.max_size()": 7,
    "vector: i_blank.reserve(512)": 7,
    "vector: i_blank.resize(256)": 27,
    "vector: reverse i_blank": 601,
    "vector: insert 10 elements at middle": 2360,
    "vector: insert range at end (append)": 694,
    "vector: i_blank.clear()": 10,
    "vector: resize and fill": 1162
  },
  "USE_ETL=1,TYPE=map": {
    "unordered_map<int, string>: _map m{}": 497,
    "unordered_map<int, string>: _map m{umap_1}": 2262,
    "unordered_map<int, string>: _map m(umap_1.begin(), umap_1.end())": 2284,
    "unordered_map<int, string>: operator[]": 48,
    "unordered_map<int, string>: insert(map.begin, std::make_pair)": 602,
    "unordered_map<int, string>: insert(std::make_pair)": 569,
    "unordered_map<int, string>: insert(mapElem)": 480,
    "unordered_map<int, string>: insert(begin, end)": 1160,
    "unordered_map<int, string>: erase(key)": 185,
    "unordered_map<int, string>: find(key)": 43,
    "unordered_map: size()": 7,
    "unordered_map: empty()": 7,
    "unordered_map: at(key)": 45,
    "unordered_map: count(key)": 87,
    "unordered_map: count(nonexistent key)": 72,
    "unordered_map: bucket_count()": 7,
    "unordered_map: load_factor()": 8,
    "unordered_map: equality comparison (==)": 2188,
    "unordered_map: operator[] overwrite": 300
  },
  "USE_ETL=1,TYPE=set": {
    "unordered_set<int>: _set_int s{}": 1376,
    "unordered_set<int>: _set_int s{copy}": 10670,
    "unordered_set<int>: _set_int s(begin, end)": 10689,
    "unordered_set<int>: operator= constructor": 10670,
    "unordered_set<string>: _set_string s{}": 1376,
    "unordered_set<string>: _set_string s{copy}": 8654,
    "unordered_set<string>: _set_str s(begin, end)": 8683,
    "unordered_set<string>: operator= constructor": 8654,
    "unordered_set<int>: uset.find(key)": 59,
    "unordered_set<string>: uset.find(key)": 442,
    "unordered_set<string>: uset.contains(key)": 350,
    "unordered_set<int>: uset.contains(key)": 95,
    "unordered_set<int>: uset.insert(key)": 214,
    "unordered_set<int>: uset.insert(begin, end)": 1919,
    "unordered_set<int>: uset.insert(hint, key)": 214,
    "unordered_set<string>: uset.insert(key)": 604,
    "unordered_set<string>: uset.insert(begin, end)": 2379,
    "unordered_set<string>: uset.insert(hint, key)": 635,
    "unordered_set<int>: uset.erase(key)": 159,
    "unordered_set<string>: uset.erase(key)": 514
  },
  "USE_ETL=1,TYPE=deque": {
    "deque<int>: deque_int{}": 77,
    "deque<int>: deque_int{empty copy}": 112,
    "deque<int>: deque_int{copy}": 1465,
    "deque<int>: deque_int(begin, end)": 1481,
    "deque<string>: deque_string{}": 87,
    "deque<string>: deque_string{empty copy}": 122,
    "deque<string>: deque_string{copy}": 6141,
    "deque<string>: deque_string(begin, end)": 6154,
    "deque<int>: operator[middle]": 54,
    "deque<int>: front()": 7,
    "deque<int>: back()": 47,
    "deque<string>: operator[middle]": 56,
    "deque<string>: front()": 7,
    "deque<string>: back()": 50,
    "deque<int>: push_front(val)": 36,
    "deque<int>: push_back(val)": 39,
    "deque<int>: insert(middle, val)": 979,
    "deque<int>: insert(pos, begin, end)": 1671,
    "deque<int>: erase(pos)": 664,
    "deque<string>: push_front(val)": 382,
    "deque<string>: push_back(val)": 385,
    "deque<string>: insert(middle, val)": 3151,
    "deque<string>: insert(pos, begin, end)": 3594,
    "deque<string>: erase(pos)": 1526
  }
}